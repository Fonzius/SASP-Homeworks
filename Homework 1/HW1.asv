
clc;
clear all;
close all;

%%%%
% Q1: check windowing and adding 
% Q2: check steepest 
%%%%
%% Legend
% p: number past samples
% n: current time
% k: k_th coefficient
% M: segment length
% a: filter coefficients

% speech: 5ms, 

%%
windowLength_piano = 2048; %2000
windowLength_speech = 2048; %220
p_piano = 10; % 10    % test, get 5 peaks, so p = 10
p_speech = 46; % 46    % 44100/1000 = 44.1
% windowtype = "hann";

method = 1; % 1 for close form, 2 for steepest descent

[aPiano, ePianotime, ePianofreq, M, num_segment,piano_fft, outputZeros, start_index, end_index ] = LPCFilter_new("piano.wav",windowLength_piano,p_piano,method);
[aSpeech, eSpeechtime, eSpeechfreq, ~, ~,speech_fft, ~, ~, ~] = LPCFilter_new("speech.wav",windowLength_speech,p_speech,method);


%% Time domain filter 
% synth_talk_time_direct = zeros(size(ePianotime));
% for ss =1:size(ePianotime,1) 
%     synth_talk_time_direct(ss,:) = filter(1,aSpeech(ss,:), ePianotime(ss,:)); %%%%right!
% end
% matrix_synth = zeros(size(ePianotime,1),length(outputZeros));
% for i = 1:length(start_index)
%     matrix_synth(i,start_index(i):end_index(i)) = synth_talk_time_direct(i,:);
% end
% output_time_direct = sum(matrix_synth,1);
% output = output_time_direct / max(abs(output_time_direct));
% sound(output,44100)



%% Frequency domain filter

% Right!
filterApiano_freq = zeros(M,num_segment);
filterHpiano_freq = zeros(M,num_segment);
filterAspeech_freq = zeros(M,num_segment);
filterHspeech_freq = zeros(M,num_segment);
piano_H_norm = zeros(M,num_segment);
speech_H_norm = zeros(M,num_segment);
error_piano =  zeros(M,num_segment);
talking_freq = zeros(M,num_segment);
error_piano_time = zeros(M,num_segment);
talking_time = zeros(M,num_segment);

aPiano =aPiano';
aSpeech =aSpeech';
piano_fft = piano_fft';
speech_fft = speech_fft';

% A,H filter in freq. domain
for ss = 1:num_segment
    [filterApiano_freq(:,ss),~] = freqz(aPiano(:,ss),1,"whole",M);
    [filterHpiano_freq(:,ss),~] = freqz(1,aPiano(:,ss),"whole",M);
    [filterAspeech_freq(:,ss),~] = freqz(aSpeech(:,ss),1,"whole",M);
    [filterHspeech_freq(:,ss),~] = freqz(1,aSpeech(:,ss),"whole",M);
    piano_H_norm(:,ss) = (filterHpiano_freq(:,ss)/max(abs(filterHpiano_freq(:,ss))))*max(abs(piano_fft(:,ss)));
    speech_H_norm(:,ss) = (filterHspeech_freq(:,ss)/max(abs(filterHspeech_freq(:,ss))))*max(abs(speech_fft(:,ss)));    
    error_piano(:,ss) =  piano_fft(:,ss)./ piano_H_norm(:,ss);   
    talking_freq(:,ss) = error_piano(:,ss) .* speech_H_norm(:,ss);
    error_piano_time(:,ss) = ifft(error_piano(:,ss));
    talking_time(:,ss) = ifft(talking_freq(:,ss));
end
% % % 1656 seg , 2048 M
% f = 44100*(0:(M/2))/M;  
% Y1 = 20*log(abs(piano_fft(1:M/2+1,3)));  
% Y2 = 20*log(abs(piano_H_norm(1:M/2+1,3)));
% Y3 = 20*log(abs(error_piano(1:M/2+1,3)));
% 
% plot(f,Y1,f,Y2,f,Y3)
% xlabel('Hz');
% ylabel('dB');
% title('Spectrogram');
% legend('Origin Signal','Shaping Filter','Error Signal')

% Define frequency range
f = 44100*(0:(2048/2))/2048;

% Create a figure
figure();

% Loop through each column of the matrices and plot them
for i = 1:size(piano_fft,2)
    
    % Compute log magnitude of FFT for each signal
    Y1 = 20*log(abs(piano_fft(1:2048/2+1,i)));  
    Y2 = 20*log(abs(piano_H_norm(1:2048/2+1,i)));
    Y3 = 20*log(abs(error_piano(1:2048/2+1,i)));
    
    % Plot the three signals on the same frequency axis
    plot(f,Y1,f,Y2,f,Y3);
    xlabel('Hz');
    ylabel('dB');
    title('Spectrogram');
    legend('Origin Signal','Shaping Filter','Error Signal');
    
    % Control the frame rate of the animation using pause function
    pause(0.01); 
    
end



talking_time = talking_time';

% Back to time domain (COLA)
matrix_synth = zeros(size(ePianotime,1),length(outputZeros));
for i = 1:length(start_index)
    matrix_synth(i,start_index(i):end_index(i)) = talking_time(i,:);
end
output_time = sum(matrix_synth,1);
output = output_time / max(abs(output_time));
sound(real(output),44100)


%% Audiowrite

if ~exist('GenerateSound','dir')
    mkdir('GenerateSound');
end

filename = ['GenerateSound/TI-M' num2str(method) '-wp' num2str(windowLength_piano) '-ws' num2str(windowLength_speech) '-pp' num2str(p_piano) '-ps' num2str(p_speech) '.wav'];
audiowrite(filename,output,44100);



clc;
clear all;
close all;

%% Legend
% p: number past samples
% n: current time
% k: k_th coefficient
% M: segment length
% a: filter coefficients

% speech: 5ms, 

%% Import the files

[piano, pianoFs] = audioread("piano.wav");
[speech, speechFs] = audioread("speech.wav");

if pianoFs == speechFs
    fs = pianoFs;
end

%% 
M = floor(5e-3*fs); % 5 ms is taken from lesson as example segment length
%nSegments = floor(length(piano)/fs); % number of segments that we get from the piano signal


index = 1:M:length(piano); %resize the piano signal
s = zeros(length(index), M); %piano signal matrix

newPiano = zeros(numel(s),1);
newPiano(1:length(piano)) = piano(:);

for ii = 1:length(s)
    s(ii,:) = newPiano(index(ii) : index(ii)+M-1);
end

%e = zeros(nSegments, length(piano)); %create an oversized matrix (all errors outside the "boundary" will be zero)

% r1 = zeros(length(s), size(s,2)*2-1);
% for ii = 1:length(s)
%     r1(ii,:) = xcorr(s(ii,:));
% end

r = zeros(length(s), size(s,2)); % n , p
for nn = 1:length(s)
    for pp = 1:M
        r(nn,pp) = sum(s(nn,1:M-pp).*s(nn,1+pp:M));
    end
end

r1 = zeros(length(s), size(s,2));
for nn = 1:length(s)
    for pp = 0:M-1
        r1(nn,pp+1) = sum(s(nn,1:M-pp).*s(nn,1+pp:M));
    end
end

R = zeros(M,M,length(s)); %p, p, n
for ii = 1:M
    for jj = 1:M
        R(ii,jj,:) = r1(:,abs(ii-jj)+1);
    end
end

a = zeros(length(s), size(s,2));
for ii = 1:length(s)
    a(ii,:) = inv(R(:,:,ii)) * r(ii,:)';
end


%%

 = r1;
poiuyf(:,1) = []